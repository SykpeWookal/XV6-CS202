New System Call: print_sysinfo(int n)
Overview

This system call prints different kernel statistics based on the input parameter n:

n	Function	 
0	Count of active processes	
1	Total number of executed system calls	
2	Number of free physical memory pages	

Implementation Summary
1️⃣ Count Active Processes (n == 0)
    ·Added in proc.c
    ·Iterates through the proc[] table
    ·Counts processes whose state ≠ UNUSED

    for(p = proc; p < &proc[NPROC]; p++){
    acquire(&p->lock);
    if(p->state != UNUSED && p->state != ZOMBIE)
        active++;
    release(&p->lock);
    }

2️⃣ Count System Calls (n == 1)

    ·Added a global counter in kernel/syscall.c:

    uint64 sys_call_count = 0;
    __sync_fetch_and_add(&sys_call_count, 1); // increment in syscall()


    ·eclared in defs.h:
    extern uint64 sys_call_count;

    ·Printed in proc.c:

    printf("syscall count: %lu\n", sys_call_count);

3️⃣ Count Free Memory Pages (n == 2)

    ·Implemented in kalloc.c:

        uint64 free_pages(void){
        uint64 total = 0;
        for(int i = 0; i < NCPU; i++){
            acquire(&kmem[i].lock);
            for(struct run *r = kmem[i].freelist; r; r = r->next)
            total++;
            release(&kmem[i].lock);
        }
        return total;
        }
    ·Declared in defs.h
    ·Called in print_sysinfo():
         printf("free pages: %lu\n", free_pages());

Modified Files
File	Change
kernel/proc.c	Added print_sysinfo()
kernel/syscall.c	Added global counter sys_call_count
kernel/kalloc.c	Added free_pages()
kernel/defs.h	Added declarations
user/user.h, user/usys.pl, kernel/syscall.h, kernel/syscall.c